/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2019 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * cti_basic_method.go
 *
 *  Created on May 12, 2019
 *      Author Massimiliano Ghilardi
 */

package xreflect

import (
	r "reflect"

	"github.com/cosmos72/gomacro/go/etoken"
)

:import (
	"go/ast"
	r "reflect"
)

:macro addmethods(typ ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	switch t.Kind() {
		case r.Bool:
			return ~"{
				for i, n := 0, xt.NumMethod(); i < n; i++ {
					switch xt.Method(i).Name {
					case "Equal":
						(*mvec)[i] = r.ValueOf(func(a ~,typ, b ~,typ) bool { return a == b })
					case "Not":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ) ~,typ { return !a })
					}
				}
			}
		case r.Int, r.Int8, r.Int16, r.Int32, r.Int64,
			r.Uint, r.Uint8, r.Uint16, r.Uint32, r.Uint64, r.Uintptr:
			return ~"{
				for i, n := 0, xt.NumMethod(); i < n; i++ {
					switch xt.Method(i).Name {
					case "Equal":
						(*mvec)[i] = r.ValueOf(func(a ~,typ, b ~,typ) bool { return a == b })
					case "Cmp":
						(*mvec)[i] = r.ValueOf(func(a ~,typ, b ~,typ) int { if a < b { return -1 }; if a > b { return 1 }; return 0 })
					case "Less":
						(*mvec)[i] = r.ValueOf(func(a ~,typ, b ~,typ) bool { return a < b })
					case "Add":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b ~,typ) ~,typ { return a + b })
					case "Sub":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b ~,typ) ~,typ { return a - b })
					case "Mul":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b ~,typ) ~,typ { return a * b })
					case "Quo":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b ~,typ) ~,typ { return a / b })
					case "Neg":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ) ~,typ { return -a })
					case "Rem":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b ~,typ) ~,typ { return a % b })
					case "And":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b ~,typ) ~,typ { return a & b })
					case "AndNot":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b ~,typ) ~,typ { return a &^ b })
					case "Or":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b ~,typ) ~,typ { return a | b })
					case "Xor":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b ~,typ) ~,typ { return a ^ b })
					case "Not":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ) ~,typ { return ^a })
					case "Lsh":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b uint8) ~,typ { return a << b })
					case "Rsh":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b uint8) ~,typ { return a >> b })
					}
				}
			}
		case r.Float32, r.Float64:
			return ~"{
				for i, n := 0, xt.NumMethod(); i < n; i++ {
					switch xt.Method(i).Name {
					case "Equal":
						(*mvec)[i] = r.ValueOf(func(a ~,typ, b ~,typ) bool { return a == b })
					case "Cmp":
						(*mvec)[i] = r.ValueOf(func(a ~,typ, b ~,typ) int { if a < b { return -1 }; if a > b { return 1 }; return 0 })
					case "Less":
						(*mvec)[i] = r.ValueOf(func(a ~,typ, b ~,typ) bool { return a < b })
					case "Add":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b ~,typ) ~,typ { return a + b })
					case "Sub":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b ~,typ) ~,typ { return a - b })
					case "Mul":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b ~,typ) ~,typ { return a * b })
					case "Quo":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b ~,typ) ~,typ { return a / b })
					case "Neg":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ) ~,typ { return -a })
					}
				}
			}
		case r.Complex64, r.Complex128:
		    tre := ~'float64
			if t.Kind() == r.Complex64 {
				tre = ~'float32
			}
			return ~"{
				for i, n := 0, xt.NumMethod(); i < n; i++ {
					switch xt.Method(i).Name {
					case "Equal":
						(*mvec)[i] = r.ValueOf(func(a ~,typ, b ~,typ) bool { return a == b })
					case "Add":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b ~,typ) ~,typ { return a + b })
					case "Sub":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b ~,typ) ~,typ { return a - b })
					case "Mul":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b ~,typ) ~,typ { return a * b })
					case "Quo":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b ~,typ) ~,typ { return a / b })
					case "Neg":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ) ~,typ { return -a })
					case "Real":
						(*mvec)[i] = r.ValueOf(func(a ~,typ) ~,tre { return real(a) })
					case "Imag":
						(*mvec)[i] = r.ValueOf(func(a ~,typ) ~,tre { return imag(a) })
					}
				}
			}
		case r.String:
			return ~"{
				for i, n := 0, xt.NumMethod(); i < n; i++ {
					switch xt.Method(i).Name {
					case "Equal":
						(*mvec)[i] = r.ValueOf(func(a ~,typ, b ~,typ) bool { return a == b })
					case "Cmp":
						(*mvec)[i] = r.ValueOf(func(a ~,typ, b ~,typ) int { if a < b { return -1 }; if a > b { return 1 }; return 0 })
					case "Less":
						(*mvec)[i] = r.ValueOf(func(a ~,typ, b ~,typ) bool { return a < b })
					case "Add":
						(*mvec)[i] = r.ValueOf(func(z ~,typ, a ~,typ, b ~,typ) ~,typ { return a + b })
					case "Index":
						(*mvec)[i] = r.ValueOf(func(a ~,typ, b int) uint8 { return a[b] })
					case "Len":
						(*mvec)[i] = r.ValueOf(func(a ~,typ) int { return len(a) })
					case "Slice":
						(*mvec)[i] = r.ValueOf(func(a ~,typ, b int, c int) ~,typ { return a[b:c] })
					}
				}
			}
		default:
			return ~'{}
	}
}

func (v *Universe) addBasicTypesMethodsCTI() {
	if !etoken.GENERICS_V2_CTI {
		return
	}
	for _, t := range v.BasicTypes {
		if t != nil {
			v.addBasicTypeMethodsCTI(unwrap(t))
		}
	}
}

func (v *Universe) addBasicTypeMethodsCTI(xt *xtype) {
	if !etoken.GENERICS_V2_CTI {
		return
	}
	mvec := xt.GetMethods()
	switch xt.kind {
	case r.Bool:
		addmethods; bool
	case r.Int:
		addmethods; int
	case r.Int8:
		addmethods; int8
	case r.Int16:
		addmethods; int16
	case r.Int32:
		addmethods; int32
	case r.Int64:
		addmethods; int64
	case r.Uint:
		addmethods; uint
	case r.Uint8:
		addmethods; uint8
	case r.Uint16:
		addmethods; uint16
	case r.Uint32:
		addmethods; uint32
	case r.Uint64:
		addmethods; uint64
	case r.Uintptr:
		addmethods; uintptr
	case r.Float32:
		addmethods; float32
	case r.Float64:
		addmethods; float64
	case r.Complex64:
		addmethods; complex64
	case r.Complex128:
		addmethods; complex128
	case r.String:
		addmethods; string
	}
}


